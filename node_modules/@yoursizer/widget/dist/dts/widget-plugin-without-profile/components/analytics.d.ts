export type EventType = 'popup_opened' | 'gender_selected' | 'measurement_entered' | 'step_completed' | 'popup_completed' | 'size_recommended' | 'add_to_cart' | 'measurement_guide_opened';
export interface AnalyticsEvent {
    event_type: EventType;
    license_key: string;
    product_id?: string;
    gender?: 'male' | 'female';
    step?: string;
    step_id?: string;
    step_completed?: boolean;
    time_spent_ms?: number;
    size?: string;
    is_mobile?: boolean;
    device_info?: {
        user_agent?: string;
        screen_width?: number;
        screen_height?: number;
        viewport_width?: number;
        viewport_height?: number;
    };
    location?: {
        country?: string;
        city?: string;
        ip?: string;
        timezone?: string;
    };
    timestamp: string;
    session_id: string;
}
export declare const detectDevice: () => {
    isMobile: boolean;
    deviceInfo: {
        user_agent: string;
        screen_width: number;
        screen_height: number;
        viewport_width: number;
        viewport_height: number;
    };
};
export declare const detectLocation: () => Promise<{
    country?: string;
    city?: string;
    ip?: string;
    timezone?: string;
}>;
declare class AnalyticsService {
    private static instance;
    private sessionId;
    private stepStartTimes;
    private readonly API_ENDPOINT;
    private deviceInfo;
    private locationInfo;
    private constructor();
    static getInstance(): AnalyticsService;
    private initializeLocation;
    getDeviceInfo(): {
        isMobile: boolean;
        deviceInfo: any;
    };
    getLocationInfo(): {
        country?: string;
        city?: string;
        ip?: string;
        timezone?: string;
    } | null;
    startStepTracking(stepId: string): void;
    private getTimeSpent;
    trackEvent(event: Omit<AnalyticsEvent, 'timestamp' | 'session_id' | 'is_mobile' | 'device_info' | 'location'>): Promise<void>;
    trackStepCompletion(stepId: string, event: Omit<AnalyticsEvent, 'timestamp' | 'session_id' | 'time_spent_ms' | 'is_mobile' | 'device_info' | 'location'>): Promise<void>;
    trackPopupOpened(licenseKey: string, productId?: string): Promise<void>;
    trackGenderSelected(licenseKey: string, gender: 'male' | 'female'): Promise<void>;
    trackMeasurementEntered(licenseKey: string, step: string, stepId: string): Promise<void>;
    trackStepCompleted(licenseKey: string, step: string, stepId: string): Promise<void>;
    trackPopupCompleted(licenseKey: string, details?: Record<string, unknown>): Promise<void>;
    trackSizeRecommended(licenseKey: string, gender: 'male' | 'female', size: string): Promise<void>;
    trackAddToCart(licenseKey: string, productId: string, size: string, recommendedSizeData?: {
        size: string;
        confidence: number;
        method: string;
        explanation?: string;
        fit_notes?: string;
        alternative_sizes?: Array<{
            size: string;
            confidence: number;
            reason?: string;
        }>;
    }): Promise<void>;
    trackMeasurementGuideOpened(licenseKey: string, measurementType: 'chest' | 'waist' | 'hips'): Promise<void>;
}
export declare const analytics: AnalyticsService;
export {};
