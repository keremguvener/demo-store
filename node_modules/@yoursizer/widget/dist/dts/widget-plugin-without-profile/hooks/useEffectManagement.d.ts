import * as THREE from 'three';
import { Measurements } from '../types';
interface UseEffectManagementParams {
    gender: "male" | "female" | null;
    measurements: {
        height: string;
        weight: string;
        chest: string;
        waist: string;
        hips: string;
    };
    userEditedMeasurements: {
        chest: boolean;
        waist: boolean;
        hips: boolean;
    };
    setMeasurements: React.Dispatch<React.SetStateAction<{
        height: string;
        weight: string;
        chest: string;
        waist: string;
        hips: string;
    }>>;
    setUserEditedMeasurements: React.Dispatch<React.SetStateAction<{
        chest: boolean;
        waist: boolean;
        hips: boolean;
    }>>;
    modelRef: React.RefObject<THREE.Group>;
    updateModelDimensions: (model: THREE.Group, measurements: Measurements) => void;
    step: number;
    isMobile: boolean;
    selectedSkinColor: string | null;
    showSkinColorPanel: boolean;
    setShowSkinColorTag: React.Dispatch<React.SetStateAction<boolean>>;
    showHairPanel: boolean;
    selectedHair: 'hair1' | 'hair2' | null;
    setShowHairTag: React.Dispatch<React.SetStateAction<boolean>>;
    hairMeshMap: React.RefObject<{
        [key: string]: THREE.Mesh[];
    }>;
    setSelectedHair: React.Dispatch<React.SetStateAction<'hair1' | 'hair2' | null>>;
    toggleHairSet: (hairType: 'hair1' | 'hair2') => void;
    useApiRecommendation: boolean;
    apiSizeResult: unknown;
    isApiLoading: boolean;
    getApiSizeRecommendation: () => Promise<any>;
    setApiSizeResult: React.Dispatch<React.SetStateAction<any>>;
    setConfidenceScore: React.Dispatch<React.SetStateAction<number>>;
    prevStepRef: React.MutableRefObject<number>;
    hasTrackedRecommendation: boolean;
    productId?: string;
    fitPreference: "slim" | "regular" | "relaxed";
    handleMorphChange?: (morphName: string, value: number) => void;
    setDebugData?: React.Dispatch<React.SetStateAction<any>>;
}
export declare function useEffectManagement({ gender, measurements, userEditedMeasurements, setMeasurements, setUserEditedMeasurements, modelRef, updateModelDimensions, step, isMobile, selectedSkinColor, showSkinColorPanel, setShowSkinColorTag, showHairPanel, selectedHair, setShowHairTag, hairMeshMap, setSelectedHair, toggleHairSet, useApiRecommendation, apiSizeResult, isApiLoading, getApiSizeRecommendation, setApiSizeResult, setConfidenceScore, prevStepRef, hasTrackedRecommendation, productId, fitPreference, handleMorphChange, setDebugData }: UseEffectManagementParams): void;
export {};
