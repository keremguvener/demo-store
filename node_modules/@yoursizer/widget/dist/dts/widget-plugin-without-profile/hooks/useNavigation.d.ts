interface ApiSizeResult {
    size?: string;
    confidence?: number;
    method?: string;
    error?: string;
    smaller_size?: string;
    larger_size?: string;
    range_type?: string;
    comments?: {
        main: string;
        smaller: string;
        larger: string;
    };
    user_measurements?: {
        Chest: number;
        Hip: number;
        Waist: number;
        Height: number;
        Weight: number;
    };
}
interface UseNavigationProps {
    isMobile: boolean;
    useApiRecommendation: boolean;
    setApiSizeResult: (result: ApiSizeResult | null) => void;
    setConfidenceScore: (score: number) => void;
    measurements?: {
        height: string;
        weight: string;
        chest: string;
        waist: string;
        hips: string;
    };
    fitPreference?: "slim" | "regular" | "relaxed";
    setMeasurementsChanged?: (changed: boolean) => void;
    setIsApiLoadingLocal?: (loading: boolean) => void;
}
export declare function useNavigation({ isMobile, useApiRecommendation, setApiSizeResult, setConfidenceScore, measurements, fitPreference, setMeasurementsChanged, setIsApiLoadingLocal }: UseNavigationProps): {
    step: number;
    setStep: import("react").Dispatch<import("react").SetStateAction<number>>;
    gender: "male" | "female" | null;
    setGender: import("react").Dispatch<import("react").SetStateAction<"male" | "female" | null>>;
    totalSteps: number;
    handleNext: () => Promise<void>;
    handlePrevious: () => void;
    setApiSizeRecommendation: (apiFunc: () => Promise<unknown>) => void;
};
export {};
