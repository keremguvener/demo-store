import React from 'react';
import { Measurements } from '../types';
interface UseStepManagerParams {
    isMobile: boolean;
    isModelLoading: boolean;
    measurements: Measurements;
    setMeasurements: React.Dispatch<React.SetStateAction<Measurements>>;
    useMetric: boolean;
    setUseMetric: React.Dispatch<React.SetStateAction<boolean>>;
    renderMeasurementInputs: (type: 'height' | 'weight' | 'chest' | 'waist' | 'hips') => React.ReactElement;
    handleWeightMorphs: (weightValue: number) => void;
    gender: "male" | "female" | null;
    setGender: React.Dispatch<React.SetStateAction<"male" | "female" | null>>;
    fitPreference: "slim" | "regular" | "relaxed";
    setFitPreference: React.Dispatch<React.SetStateAction<"slim" | "regular" | "relaxed">>;
    apiSizeResult?: {
        size?: string;
        confidence?: number;
        method?: string;
        error?: string;
        explanation?: string;
        fit_notes?: string;
        alternative_sizes?: Array<{
            size: string;
            confidence: number;
            reason?: string;
        }>;
        smaller_size?: string;
        larger_size?: string;
        range_type?: string;
        comments?: {
            main: string;
            smaller: string;
            larger: string;
        };
        user_measurements?: {
            Chest: number;
            Hip: number;
            Waist: number;
            Height: number;
            Weight: number;
        };
    } | null;
    isApiLoading?: boolean;
    apiError?: Error | null;
    calculateSize?: () => {
        size: string;
        confidence: number;
    };
    handleAddToBag?: () => void;
    getLocalJSONBasedLimits?: (type: 'chest' | 'waist' | 'hips') => {
        min: number;
        max: number;
        default: number;
    };
    setUserEditedMeasurements?: React.Dispatch<React.SetStateAction<{
        chest: boolean;
        waist: boolean;
        hips: boolean;
    }>>;
    handleMorphChange?: (paramName: string, value: number) => void;
    setShowMeasurementGuide?: (type: 'chest' | 'waist' | 'hips') => void;
    measurementsChanged?: boolean;
    debugData?: {
        heightWeight?: {
            fetchedData?: {
                measurements?: {
                    chest: number;
                    waist: number;
                    hips: number;
                };
            };
        };
    };
}
interface UseStepManagerReturn {
    renderStep1: () => React.ReactElement;
    renderStep2: () => React.ReactElement;
    renderStep3: () => React.ReactElement;
    renderStep4: () => React.ReactElement;
    renderStep5: () => React.ReactElement;
    renderMobileStep4: () => React.ReactElement;
    renderMobileStep5: () => React.ReactElement;
    renderMobileStep6: () => React.ReactElement;
    renderMobileStep7: () => React.ReactElement;
    renderMobileStep8: () => React.ReactElement;
    handleGenderSelect: (newGender: "male" | "female") => void;
}
export declare function useStepManager(params: UseStepManagerParams): UseStepManagerReturn;
export {};
