/**
 * Debug Utilities
 * Consolidated debug panel and logging utilities
 */
import React from 'react';
/**
 * Generic Debug Panel Props
 */
interface BaseDebugPanelProps {
    title: string;
    className?: string;
}
/**
 * Simple Debug Panel for JSON data
 */
interface DebugPanelProps extends BaseDebugPanelProps {
    data: any;
}
export declare const DebugPanel: React.FC<DebugPanelProps>;
/**
 * Enhanced JSON Debug Panel with loading states
 */
interface JsonDebugPanelProps extends BaseDebugPanelProps {
    jsonData: any;
    isLoading: boolean;
    error: string | null | undefined;
}
export declare const JsonDebugPanel: React.FC<JsonDebugPanelProps>;
/**
 * Debug data formatters for different step contexts
 */
export declare const DebugDataFormatters: {
    step2: (measurements: any, debugData: any, getLocalJSONBasedLimits?: Function) => {
        measurements: {
            height: any;
            weight: any;
        };
        fetchedData: any;
        limits: any;
        morphTargets: any;
        currentMeasurements: {
            chest: any;
            waist: any;
            hips: any;
        };
        ranges: {
            chest: any;
            waist: any;
            hips: any;
        } | null;
    };
    step3: (measurements: any, debugData: any) => {
        measurements: {
            chest: any;
            waist: any;
            hips: any;
        };
        fetchedData: any;
        jsonBasedLimits: any;
        userEditedFlags: any;
    };
};
/**
 * Morph Debug Panel - Shows 0.36 logic calculations and current morph values
 */
interface MorphDebugPanelProps extends BaseDebugPanelProps {
    morphTargets: Map<string, {
        name: string;
        meshes: Array<{
            mesh: any;
            index: number;
        }>;
    }>;
    morphValues: Map<string, number>;
    calculateMorphRange?: (jsonPositionPercent: number) => {
        min: number;
        max: number;
        rangeBelow: number;
        rangeAbove: number;
        total: number;
    };
    measurements?: any;
    jsonValues?: {
        chest?: number;
        waist?: number;
        hips?: number;
    };
    sliderRanges?: {
        chest?: {
            min: number;
            max: number;
        };
        waist?: {
            min: number;
            max: number;
        };
        hips?: {
            min: number;
            max: number;
        };
    };
}
export declare const MorphDebugPanel: React.FC<MorphDebugPanelProps>;
/**
 * Console logging utilities for debug information
 */
export declare const DebugLogger: {
    step5: (data: {
        isApiLoading: boolean;
        measurementsChanged: boolean;
        apiSizeResult: any;
        hasSize: boolean;
        hasError: boolean;
    }) => void;
    measurement: (type: string, data: any, isMobile?: boolean) => void;
    morph: (morphName: string, data: {
        morphValue: number;
        sliderPositionPercent: number;
        jsonPositionPercent: number;
        morphRange: any;
    }) => void;
};
export {};
