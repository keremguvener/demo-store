export type EventType = 'popup_opened' | 'gender_selected' | 'measurement_entered' | 'step_completed' | 'popup_completed' | 'size_recommended' | 'add_to_cart' | 'measurement_guide_opened';
export interface AnalyticsEvent {
    event_type: EventType;
    license_key: string;
    product_id?: string;
    gender?: 'male' | 'female';
    step?: string;
    step_id?: string;
    step_completed?: boolean;
    time_spent_ms?: number;
    location?: {
        country?: string;
        city?: string;
    };
    timestamp: string;
    session_id: string;
}
declare class AnalyticsService {
    private static instance;
    private sessionId;
    private stepStartTimes;
    private readonly API_ENDPOINT;
    private constructor();
    static getInstance(): AnalyticsService;
    startStepTracking(stepId: string): void;
    private getTimeSpent;
    trackEvent(event: Omit<AnalyticsEvent, 'timestamp' | 'session_id'>): Promise<void>;
    trackStepCompletion(stepId: string, event: Omit<AnalyticsEvent, 'timestamp' | 'session_id' | 'time_spent_ms'>): Promise<void>;
    trackPopupOpened(licenseKey: string, productId?: string): Promise<void>;
    trackGenderSelected(licenseKey: string, gender: 'male' | 'female'): Promise<void>;
    trackMeasurementEntered(licenseKey: string, step: string, stepId: string): Promise<void>;
    trackStepCompleted(licenseKey: string, step: string, stepId: string): Promise<void>;
    trackPopupCompleted(licenseKey: string, details?: Record<string, any>): Promise<void>;
    trackSizeRecommended(licenseKey: string, gender: 'male' | 'female', size: string): Promise<void>;
    trackAddToCart(licenseKey: string, productId: string, size: string): Promise<void>;
    trackMeasurementGuideOpened(licenseKey: string, measurementType: 'chest' | 'waist' | 'hips'): Promise<void>;
}
export declare const analytics: AnalyticsService;
export {};
