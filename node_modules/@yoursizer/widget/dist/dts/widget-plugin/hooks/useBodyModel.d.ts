import * as THREE from 'three';
import { Measurements, Gender } from '../types/index';
interface UseBodyModelParams {
    sceneRef: React.MutableRefObject<THREE.Scene | null>;
    cameraRef: React.MutableRefObject<THREE.PerspectiveCamera | null>;
    modelContainerRef: React.RefObject<HTMLDivElement>;
    gender: Gender;
    measurements: Measurements;
    step: number;
    isMobile: boolean;
    setIsModelLoading: (loading: boolean) => void;
    setModelError: (error: string | null) => void;
    selectedSkinColor: string | null;
    showSkinColorPanel: boolean;
    setSelectedSkinColor: (color: string | null) => void;
    setShowSkinColorPanel: (show: boolean) => void;
    setShowSkinColorTag: (show: boolean) => void;
    showHairPanel: boolean;
    selectedHair: 'hair1' | 'hair2' | null;
    setSelectedHair: (hair: 'hair1' | 'hair2' | null) => void;
    setShowHairTag: (show: boolean) => void;
    setDebugData?: (data: any) => void;
}
interface UseBodyModelReturn {
    modelRef: React.MutableRefObject<THREE.Group | null>;
    morphTargets: Map<string, {
        name: string;
        meshes: Array<{
            mesh: THREE.Mesh;
            index: number;
        }>;
    }>;
    setMorphTargets: React.Dispatch<React.SetStateAction<Map<string, {
        name: string;
        meshes: Array<{
            mesh: THREE.Mesh;
            index: number;
        }>;
    }>>>;
    morphValues: Map<string, number>;
    setMorphValues: React.Dispatch<React.SetStateAction<Map<string, number>>>;
    hairMorphTargets: Map<string, {
        name: string;
        meshes: any[];
    }>;
    setHairMorphTargets: React.Dispatch<React.SetStateAction<Map<string, {
        name: string;
        meshes: any[];
    }>>>;
    hairMorphValues: Map<string, number>;
    setHairMorphValues: React.Dispatch<React.SetStateAction<Map<string, number>>>;
    hairMeshMap: React.MutableRefObject<{
        hair1: any[];
        hair2: any[];
        hair3: any[];
    }>;
    handleSkinColorSelect: (color: string) => void;
    switchSkin: (name: string) => void;
    handleHairMorphChange: (morphName: string, value: number) => void;
    toggleHairSet: (set: 'hair1' | 'hair2') => void;
    handleMorphChange: (morphName: string, value: number) => void;
    handleMorphChangeFromSlider: (morphName: string, sliderValue: number, jsonValue: number, sliderMin: number, sliderMax: number) => any;
    calculateMorphRange: (jsonPositionPercent: number, measurementType?: 'chest' | 'waist' | 'hips') => {
        min: number;
        max: number;
        rangeBelow: number;
        rangeAbove: number;
        total: number;
    };
    calculateMorphFromSliderPosition: (sliderPositionPercent: number, jsonPositionPercent: number, measurementType?: 'chest' | 'waist' | 'hips') => {
        morphValue: number;
        morphRange: any;
        isAtJSON: boolean;
    };
    resetAllMorphs: () => void;
    updateModelDimensions: (model: THREE.Group, measurements: any) => void;
}
export declare function useBodyModel(params: UseBodyModelParams): UseBodyModelReturn;
export {};
