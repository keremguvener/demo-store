import React, { ReactElement } from 'react';
import { Measurements } from '../types/index';
interface UseStepManagerParams {
    isMobile: boolean;
    isModelLoading: boolean;
    measurements: Measurements;
    setMeasurements: React.Dispatch<React.SetStateAction<Measurements>>;
    useMetric: boolean;
    setUseMetric: React.Dispatch<React.SetStateAction<boolean>>;
    renderMeasurementInputs: (type: 'height' | 'weight' | 'chest' | 'waist' | 'hips') => ReactElement;
    handleWeightMorphs: (weightValue: number) => void;
    gender: "male" | "female" | null;
    setGender: React.Dispatch<React.SetStateAction<"male" | "female" | null>>;
    fitPreference: "slim" | "regular" | "relaxed";
    setFitPreference: React.Dispatch<React.SetStateAction<"slim" | "regular" | "relaxed">>;
    setStep?: (step: number) => void;
    currentProfile?: any;
    updateSizeRecommendation?: (clothingType: string, size: string, confidence: number) => void;
    clearSizeRecommendation?: (clothingType: string) => void;
    apiSizeResult?: {
        size?: string;
        confidence?: number;
        method?: string;
        error?: string;
    } | null;
    isApiLoading?: boolean;
    apiError?: any;
    calculateSize?: () => {
        size: string;
        confidence: number;
    };
    handleAddToBag?: () => void;
    getLocalJSONBasedLimits?: (type: 'chest' | 'waist' | 'hips') => {
        min: number;
        max: number;
        default: number;
    };
    setUserEditedMeasurements?: React.Dispatch<React.SetStateAction<{
        chest: boolean;
        waist: boolean;
        hips: boolean;
    }>>;
    handleMorphChange?: (paramName: string, value: number) => void;
    setShowMeasurementGuide?: (type: 'chest' | 'waist' | 'hips') => void;
    measurementsChanged?: boolean;
    debugData?: any;
}
interface UseStepManagerReturn {
    renderStep1: () => ReactElement;
    renderStep2: () => ReactElement;
    renderStep3: () => ReactElement;
    renderStep4: () => ReactElement;
    renderStep5: () => ReactElement;
    renderMobileStep4: () => ReactElement;
    renderMobileStep5: () => ReactElement;
    renderMobileStep6: () => ReactElement;
    renderMobileStep7: () => ReactElement;
    renderMobileStep8: () => ReactElement;
    handleGenderSelect: (newGender: "male" | "female") => void;
}
export declare function useStepManager(params: UseStepManagerParams): UseStepManagerReturn;
export {};
