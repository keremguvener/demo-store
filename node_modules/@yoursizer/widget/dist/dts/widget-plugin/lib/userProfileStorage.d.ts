export interface UserProfile {
    id: string;
    name: string;
    gender: "male" | "female";
    measurements: {
        height: string;
        weight: string;
        chest: string;
        waist: string;
        hips: string;
    };
    userAdjustedMeasurements?: {
        chest?: string;
        waist?: string;
        hips?: string;
        lastUpdated?: string;
    };
    fitPreference: "slim" | "regular" | "relaxed";
    skinColor?: string;
    hairType?: 'hair1' | 'hair2';
    modelState?: {
        morphValues: {
            [key: string]: number;
        };
        hairMorphValues: {
            [key: string]: number;
        };
        parameterValues: {
            [key: string]: number;
        };
        skinColor: string;
        hairType: 'hair1' | 'hair2' | null;
        measurements: {
            height: string;
            weight: string;
            chest: string;
            waist: string;
            hips: string;
        };
    };
    sizeRecommendations: {
        [clothingType: string]: {
            size: string;
            confidence: number;
            timestamp: string;
        };
    };
    createdAt: string;
    updatedAt: string;
    isActive: boolean;
}
export interface UserProfilesData {
    profiles: UserProfile[];
    activeProfileId: string | null;
    lastUsed: string;
}
declare class UserProfileStorage {
    private static instance;
    private data;
    private constructor();
    static getInstance(): UserProfileStorage;
    private setCookie;
    private getCookie;
    private deleteCookie;
    private saveToStorage;
    private loadFromStorage;
    private loadData;
    private saveData;
    getAllProfiles(): UserProfile[];
    getActiveProfile(): UserProfile | null;
    getProfileById(id: string): UserProfile | null;
    createProfile(gender: "male" | "female", measurements: UserProfile['measurements'], fitPreference: UserProfile['fitPreference']): UserProfile;
    updateProfile(id: string, updates: Partial<UserProfile>): UserProfile | null;
    updateSizeRecommendation(id: string, clothingType: string, size: string, confidence: number): void;
    clearSizeRecommendation(id: string, clothingType: string): void;
    setActiveProfile(id: string): boolean;
    deleteProfile(id: string): boolean;
    clearAllData(): void;
    getSizeRecommendationForProduct(profileId: string, clothingType: string): {
        size: string;
        confidence: number;
    } | null;
    hasActiveProfile(): boolean;
    getProfileCount(): number;
    refreshData(): void;
    saveModelState(profileId: string, modelState: UserProfile['modelState']): boolean;
    getModelState(profileId: string): UserProfile['modelState'] | null;
    clearModelState(profileId: string): boolean;
    saveUserAdjustedMeasurements(profileId: string, measurements: {
        chest?: string;
        waist?: string;
        hips?: string;
    }): boolean;
    getUserAdjustedMeasurements(profileId: string): UserProfile['userAdjustedMeasurements'] | null;
    clearUserAdjustedMeasurements(profileId: string): boolean;
    getEffectiveMeasurements(profileId: string): UserProfile['measurements'] | null;
}
export declare const userProfileStorage: UserProfileStorage;
export {};
