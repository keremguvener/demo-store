/**
 * Consolidated utility functions for hooks to eliminate code duplication
 */
export declare const UNIT_CONSTANTS: {
    readonly CM_PER_INCH: 2.54;
    readonly LBS_PER_KG: 2.20462;
    readonly DEBOUNCE_DELAY: 700;
};
export interface MeasurementSet {
    height: string;
    weight: string;
    chest: string;
    waist: string;
    hips: string;
}
export declare const GENDER_DEFAULTS: {
    readonly male: {
        readonly height: 175;
        readonly weight: 75;
        readonly chest: 100;
        readonly waist: 85;
        readonly hips: 95;
    };
    readonly female: {
        readonly height: 160;
        readonly weight: 60;
        readonly chest: 90;
        readonly waist: 75;
        readonly hips: 100;
    };
};
/**
 * Parse measurement value with gender-specific fallback
 * Eliminates the duplicate pattern: parseFloat(measurements[type]) || defaultValue
 */
export declare function parseMeasurement(measurements: MeasurementSet, type: keyof MeasurementSet, gender: 'male' | 'female' | null): number;
/**
 * Parse all measurements at once with gender-specific fallbacks
 * Eliminates the 5-line duplicate pattern found in multiple files
 */
export declare function parseAllMeasurements(measurements: MeasurementSet, gender: 'male' | 'female' | null): {
    height: number;
    weight: number;
    chest: number;
    waist: number;
    hips: number;
};
/**
 * Format measurement value for storage
 * Eliminates the duplicate pattern: Math.round(value).toString() vs value.toFixed(1)
 */
export declare function formatMeasurementForStorage(value: number, type: keyof MeasurementSet): string;
/**
 * Clamp value within range
 * Eliminates the duplicate pattern: Math.max(min, Math.min(max, value))
 */
export declare function clampValue(value: number, min: number, max: number): number;
/**
 * Convert metric to imperial
 */
export declare function convertMetricToImperial(value: number, type: keyof MeasurementSet): number;
/**
 * Convert imperial to metric
 */
export declare function convertImperialToMetric(value: number, type: keyof MeasurementSet): number;
/**
 * Debounce utility class to manage multiple debounced functions
 * Eliminates the duplicate pattern: clearTimeout(debounceRefs.current[type])
 */
export declare class DebounceManager {
    private timers;
    /**
     * Execute a function with debounce
     */
    debounce<T extends any[]>(key: string, fn: (...args: T) => void, delay?: number): (...args: T) => void;
    /**
     * Clear specific debounce timer
     */
    clear(key: string): void;
    /**
     * Clear all debounce timers
     */
    clearAll(): void;
}
/**
 * Create JSON cache key for measurements
 * Eliminates duplicate cache key generation patterns
 */
export declare function createCacheKey(height: number, weight: number): string;
/**
 * Apply shape keys to model with standard conditional logic
 * Eliminates the duplicate conditional pattern for shape key application
 */
export declare function applyShapeKeys(shapeKeys: {
    chest?: number;
    waist?: number;
    hips?: number;
}, handleMorphChange: (morphName: string, value: number) => void): void;
/**
 * Calculate dynamic range for body measurements (chest, waist, hips)
 * Eliminates duplicate Â±6 range calculation logic
 */
export declare function calculateDynamicRange(fetchedValue: number, absoluteMin: number, absoluteMax: number, rangeSize?: number): {
    min: number;
    max: number;
};
/**
 * Normalize slider value to 0-1 range
 * Eliminates duplicate normalization calculations
 */
export declare function normalizeSliderValue(value: number, min: number, max: number): number;
/**
 * Denormalize slider value from 0-1 range
 * Eliminates duplicate denormalization calculations
 */
export declare function denormalizeSliderValue(normalizedValue: number, min: number, max: number): number;
