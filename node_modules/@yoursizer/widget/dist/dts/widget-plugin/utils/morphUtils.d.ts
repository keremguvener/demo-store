/**
 * Morph Target Utilities
 * Consolidated morph calculation and handling logic
 */
/**
 * Calculate morph value from measurement difference
 * @param currentValue - Current measurement value
 * @param jsonBaseValue - Base value from JSON data
 * @param normalizationFactor - Factor to normalize the difference (default: 6)
 * @returns Normalized morph value between -1 and 1
 */
export declare function calculateMorphValue(currentValue: number, jsonBaseValue: number, normalizationFactor?: number): number;
/**
 * Handle morph change for a specific measurement type
 * @param measurementType - Type of measurement (chest, waist, hips)
 * @param currentValue - Current measurement value
 * @param getLocalJSONBasedLimits - Function to get JSON-based limits
 * @param handleMorphChange - Function to apply morph changes
 */
export declare function handleMeasurementMorphChange(measurementType: 'chest' | 'waist' | 'hips', currentValue: number, getLocalJSONBasedLimits: (type: 'chest' | 'waist' | 'hips') => {
    min: number;
    max: number;
    default: number;
}, handleMorphChange: (morphName: string, value: number) => void): void;
/**
 * Log measurement change for debugging
 * @param measurementType - Type of measurement
 * @param fromValue - Previous value
 * @param toValue - New value
 * @param jsonBase - Base value from JSON
 * @param isMobile - Whether this is a mobile context
 */
export declare function logMeasurementChange(measurementType: string, fromValue: number, toValue: number, jsonBase: number, isMobile?: boolean): void;
/**
 * Common measurement change handler for sliders
 * @param params - Parameters for handling measurement changes
 */
export interface MeasurementChangeParams {
    measurementType: 'chest' | 'waist' | 'hips';
    newValue: number;
    measurements: any;
    setMeasurements: React.Dispatch<React.SetStateAction<any>>;
    setUserEditedMeasurements: React.Dispatch<React.SetStateAction<any>>;
    getLocalJSONBasedLimits: (type: 'chest' | 'waist' | 'hips') => {
        min: number;
        max: number;
        default: number;
    };
    handleMorphChange: (morphName: string, value: number) => void;
    isMobile?: boolean;
}
export declare function handleSliderMeasurementChange(params: MeasurementChangeParams): void;
