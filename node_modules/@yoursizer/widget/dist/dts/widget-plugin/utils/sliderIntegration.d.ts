/**
 * Enhanced slider configuration that integrates with existing MeasurementSlider
 */
export interface EnhancedSliderConfig {
    min: number;
    max: number;
    jsonValue: number;
    currentValue: number;
    step: number;
    indicatorPosition: number;
    canIncrease: boolean;
    canDecrease: boolean;
    steps: number[];
}
/**
 * Calculate enhanced slider configuration for integration with existing components
 */
export declare function getEnhancedSliderConfig(measurementType: 'chest' | 'waist' | 'hips', jsonValue: number, currentValue: number, gender: 'male' | 'female'): EnhancedSliderConfig;
/**
 * Example of how to modify existing MeasurementSlider props
 */
export declare function getAdaptedSliderProps(measurementType: 'chest' | 'waist' | 'hips', jsonValue: number, currentValue: number, gender: 'male' | 'female'): {
    min: number;
    max: number;
    value: number;
    step: number;
    jsonIndicator: number;
    showJsonIndicator: boolean;
    canIncrease: boolean;
    canDecrease: boolean;
    stepMarkers: number[];
    isAtMin: boolean;
    isAtMax: boolean;
    isModifiedFromJson: boolean;
};
/**
 * Hook for managing enhanced slider state
 */
export declare function useEnhancedSlider(measurementType: 'chest' | 'waist' | 'hips', jsonValue: number, initialValue: number, gender: 'male' | 'female', onValueChange: (value: number) => void): {
    config: EnhancedSliderConfig;
    handleSliderChange: (newValue: number) => void;
    resetToJson: () => void;
    canReset: boolean;
    isModified: boolean;
    isAtLimit: boolean;
};
export declare function testIntegration(): {
    femaleHipsMax: {
        min: number;
        max: number;
        value: number;
        step: number;
        jsonIndicator: number;
        showJsonIndicator: boolean;
        canIncrease: boolean;
        canDecrease: boolean;
        stepMarkers: number[];
        isAtMin: boolean;
        isAtMax: boolean;
        isModifiedFromJson: boolean;
    };
    femaleHipsModified: {
        min: number;
        max: number;
        value: number;
        step: number;
        jsonIndicator: number;
        showJsonIndicator: boolean;
        canIncrease: boolean;
        canDecrease: boolean;
        stepMarkers: number[];
        isAtMin: boolean;
        isAtMax: boolean;
        isModifiedFromJson: boolean;
    };
    maleChestNormal: {
        min: number;
        max: number;
        value: number;
        step: number;
        jsonIndicator: number;
        showJsonIndicator: boolean;
        canIncrease: boolean;
        canDecrease: boolean;
        stepMarkers: number[];
        isAtMin: boolean;
        isAtMax: boolean;
        isModifiedFromJson: boolean;
    };
};
export declare const INTEGRATION_INSTRUCTIONS = "\n\uD83C\uDFAF Integration Steps:\n\n1. Import the enhanced functions:\n   import { getEnhancedSliderConfig, useEnhancedSlider } from './utils/sliderIntegration';\n\n2. In your MeasurementSlider component, replace fixed min/max with dynamic values:\n   \n   Before:\n   const min = 60;\n   const max = 120;\n   \n   After:\n   const config = getEnhancedSliderConfig(measurementType, jsonValue, currentValue, gender);\n\n3. Add JSON indicator to your slider UI:\n   - Show blue indicator at config.indicatorPosition\n   - Show current value indicator (red) if different from JSON\n   - Use config.min and config.max for slider range\n\n4. Update your slider event handlers:\n   const { handleSliderChange, resetToJson, canReset } = useEnhancedSlider(\n     measurementType, jsonValue, currentValue, gender, onValueChange\n   );\n\n5. Add step markers (optional):\n   config.steps.map(step => <div key={step} className=\"step-marker\" />)\n\n6. Add reset button (optional):\n   {canReset && <button onClick={resetToJson}>Reset to JSON</button>}\n";
